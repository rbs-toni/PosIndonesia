@namespace PosIndonesia
@using Microsoft.AspNetCore.Components.Routing
@inherits PosComponentBase

@if (Paged?.HasData == true)
{
    <PosContainer Class="px-2 py-1 is-flex is-justify-content-space-between">
        <div class="select">
            <select @bind=_pageSize @bind:after=SetPageSize>
                <option value="10" selected="@(_pageSize==10)">10</option>
                <option value="25" selected="@(_pageSize==25)">25</option>
                <option value="50" selected="@(_pageSize==50)">50</option>
                <option value="100" selected="@(_pageSize==100)">100</option>
            </select>
        </div>
        <PosPagination Page="@Paged!.Page"
                       PageChanged="OnPageChanged"
                       TotalPages="@Paged!.TotalPages"
                       HasNextPage="@Paged.HasNextPage"
                       HasPreviousPage="@Paged.HasPreviousPage" />
    </PosContainer>
    <PosContainer Class="mb-4">
        <table class="table is-fullwidth is-hoverable">
            <thead>
                <tr>
                    <th>#</th>
                    <th>
                        <div class="TH">
                            Kodepos
                            <span class="THIcon">
                                @{
                                    var codeindex = sortOrders.IndexOf("Code");
                                }
                                @(codeindex != -1 ? codeindex + 1 : "")
                                <PostSortOrder Field="Code" OrderChanged="OrderChanged" />
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="TH">
                            Provinsi
                            <span class="THIcon">
                                @{
                                    var provinceindex = sortOrders.IndexOf("Province");
                                }
                                @(provinceindex != -1 ? provinceindex + 1 : "")
                                <PostSortOrder Field="Province" OrderChanged="OrderChanged" />
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="TH">
                            Kota/Kabupaten
                            <span class="THIcon">
                                @{
                                    var regencyindex = sortOrders.IndexOf("Regency");
                                }
                                @(regencyindex != -1 ? regencyindex + 1 : "")
                                <PostSortOrder Field="Regency" OrderChanged="OrderChanged" />
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="TH">
                            Kecamatan
                            <span class="THIcon">
                                @{
                                    var districtindex = sortOrders.IndexOf("District");
                                }
                                @(districtindex != -1 ? districtindex + 1 : "")
                                <PostSortOrder Field="District" OrderChanged="OrderChanged" />
                            </span>
                        </div>
                    </th>
                    <th>
                        <div class="TH">
                            Kelurahan
                            <span class="THIcon">
                                @{
                                    var villageindex = sortOrders.IndexOf("Village");
                                }
                                @(villageindex != -1 ? villageindex + 1 : "")
                                <PostSortOrder Field="Village" OrderChanged="OrderChanged" />
                            </span>
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Paged?.HasData == true)
                {
                    foreach (var (item, idx) in Paged.Items!.Select((x, y) => (x, y)))
                    {
                        <tr @key=item.UniqueKey() @onclick=@(() => PostalSelectedHandler(item)) class="is-clickable">
                            <td>@(idx + 1)</td>
                            <th>@item.Code</th>
                            <td>@item.Province</td>
                            <td>@item.Regency</td>
                            <td>@item.District</td>
                            <td>@item.Village</td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </PosContainer>
}

@code {
    SortOrderCollection sortOrders = new();
    int _pageSize;

    [Parameter]
    public PagedPostal? Paged { get; set; }

    [Parameter]
    public EventCallback<Postal> OnPostalSelected { get; set; }

    [Parameter]
    public EventCallback<SortOrderCollection> SortOrderChanged { get; set; }

    [Parameter]
    public EventCallback<int> PageSizeChanged { get; set; }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    Task OnPageChanged(int page)
    {
        return PageChanged.InvokeAsync(page);
    }

    Task SetPageSize()
    {
        return PageSizeChanged.InvokeAsync(_pageSize);
    }

    protected override void OnInitialized()
    {
        _pageSize = Paged?.PageSize ?? 100;
    }

    void OrderChanged(string field, int order)
    {
        var sortOrder = new SortOrder(field, OrderToDirection(order));
        if (sortOrders.Any(x => x.Name == field))
        {

            var existedSortOrder = sortOrders.FirstOrDefault(x => x.Name == field);
            if (existedSortOrder != null)
            {
                if (order == 3)
                {
                    sortOrders.Remove(existedSortOrder);
                }
                else
                {

                    existedSortOrder.Dir = OrderToDirection(order);
                }
            }
        }
        else
        {
            sortOrders.Add(sortOrder);
        }
        SortOrderChanged.InvokeAsync(sortOrders);
    }

    Task PostalSelectedHandler(Postal postal)
    {
        return OnPostalSelected.InvokeAsync(postal);
    }

    string OrderToDirection(int order)
    {
        if (order == 1)
        {
            return "asc";
        }
        else if (order == 2)
        {
            return "desc";
        }
        else return "";
    }
}