@namespace PosIndonesia
@inherits PosComponentBase

<nav class="pagination" role="navigation" aria-label="pagination">
    @if (HasPreviousPage)
    {
        <a class="pagination-previous" @onclick=@(() => GoToPage(Page - 1))>Previous</a>
    }
    @if (HasNextPage)
    {
        <a class="pagination-next" @onclick=@(() => GoToPage(Page + 1))>Next page</a>
    }
    <ul class="pagination-list">
        @foreach (var item in Paginate())
        {
            var cssNames = Page == item ? "pagination-link is-current" : "pagination-link";
            if (item != -1)
            {
                <li>
                    <a class="@cssNames" aria-label="Goto page @item" @onclick=@(() => GoToPage(item))>@item</a>
                </li>
            }
            else
            {
                <li>
                    <span class="pagination-ellipsis">&hellip;</span>
                </li>
            }
        }
    </ul>
</nav>

@code {
    const int MaxVisiblePages = 5;

    [Parameter]
    public int Page { get; set; }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public bool HasNextPage { get; set; }

    [Parameter]
    public bool HasPreviousPage { get; set; }

    Task GoToPage(int page)
    {
        return PageChanged.InvokeAsync(page);
    }

    List<int> Paginate()
    {
        var pages = new List<int>();
        if (TotalPages <= MaxVisiblePages)
        {
            for (int i = 0; i < TotalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            int halfWindow = MaxVisiblePages / 2;
            int startPage = Math.Max(1, Page - halfWindow);
            int endPage = Math.Min(TotalPages, Page + halfWindow);

            if (startPage > 1)
            {
                startPage += 1;
            }
            if (endPage < TotalPages)
            {
                endPage -= 1;
            }

            for (int i = startPage; i <= endPage; i++)
            {
                pages.Add(i);
            }

            if (startPage > 2)
            {
                pages.Insert(0, -1);
            }
            if (startPage > 1)
            {
                pages.Insert(0, 1);
            }

            if (endPage < TotalPages - 1)
            {
                pages.Add(-1);
            }
            if (endPage < TotalPages)
            {
                pages.Add(TotalPages);
            }
        }

        return pages;
    }
}